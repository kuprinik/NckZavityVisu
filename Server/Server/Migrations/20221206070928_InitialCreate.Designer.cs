// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20221206070928_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Server.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"), 1L, 1);

                    b.Property<DateTime>("EndTs")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTs")
                        .HasColumnType("datetime2");

                    b.HasKey("BatchId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("Server.Models.Data", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"), 1L, 1);

                    b.Property<double>("PhiScrew")
                        .HasColumnType("float");

                    b.Property<int>("ScrewId")
                        .HasColumnType("int");

                    b.Property<double>("Ta7")
                        .HasColumnType("float");

                    b.Property<double>("TcpFx")
                        .HasColumnType("float");

                    b.Property<double>("TcpFy")
                        .HasColumnType("float");

                    b.Property<double>("TcpFz")
                        .HasColumnType("float");

                    b.Property<double>("TcpTx")
                        .HasColumnType("float");

                    b.Property<double>("TcpTy")
                        .HasColumnType("float");

                    b.Property<double>("TcpTz")
                        .HasColumnType("float");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.HasKey("DataId");

                    b.HasIndex("ScrewId")
                        .IsUnique();

                    b.ToTable("Data");
                });

            modelBuilder.Entity("Server.Models.Screw", b =>
                {
                    b.Property<int>("ScrewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScrewId"), 1L, 1);

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ok")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTs")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StopTs")
                        .HasColumnType("datetime2");

                    b.HasKey("ScrewId");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.ToTable("Screw");
                });

            modelBuilder.Entity("Server.Models.Data", b =>
                {
                    b.HasOne("Server.Models.Screw", "Screw")
                        .WithOne("Data")
                        .HasForeignKey("Server.Models.Data", "ScrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screw");
                });

            modelBuilder.Entity("Server.Models.Screw", b =>
                {
                    b.HasOne("Server.Models.Batch", "Batch")
                        .WithOne("Screw")
                        .HasForeignKey("Server.Models.Screw", "BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Server.Models.Batch", b =>
                {
                    b.Navigation("Screw")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Screw", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
